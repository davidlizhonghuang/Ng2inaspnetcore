If you don’t want to use server-side prerendering for some reason, disable it by removing the asp-prerender-module attribute from the <app> element in Views/Home/Index.cshtml.


import 'angular2-universal-polyfills/browser';
import { enableProdMode } from '@angular/core';
import { platformUniversalDynamic } from 'angular2-universal';
import { AppModule } from './app/app.module';
import 'bootstrap';

// Enable either Hot Module Reloading or production mode
if (module['hot']) {
    module['hot'].accept();
    module['hot'].dispose(() => { platform.destroy(); });
} else {
    enableProdMode();
}

// Boot the application, either now or when the DOM content is loaded
const platform = platformUniversalDynamic();
const bootApplication = () => { platform.bootstrapModule(AppModule); };
if (document.readyState === 'complete') {
    bootApplication();
} else {
    document.addEventListener('DOMContentLoaded', bootApplication);
}


//view/home/index.cshtml

//...vendor.js
//

//@section scripts {
//    <script src="~/dist/main-client.js" asp- append - version="true" > </script> @*// this is all we make here*@
//}

//here we write js code here
//main-client.js is from webpack.config.js in root boot-client.ts.

//var clientBundleConfig = merge(sharedConfig, {
//    entry: { 'main-client': './ClientApp/boot-client.ts' },
//    output: { path: path.join(__dirname, './wwwroot/dist') },
//    devtool: isDevBuild ? 'inline-source-map' : null,
//    plugins: [
//        new webpack.DllReferencePlugin({
//            context: __dirname,
//            manifest: require('./wwwroot/dist/vendor-manifest.json')
//        })
//    ].concat(isDevBuild ? [] : [
//        // Plugins that apply in production builds only
//        new webpack.optimize.OccurenceOrderPlugin(),
//        new webpack.optimize.UglifyJsPlugin()
//    ])
//});


//1, so start from boot-client.ts

//2, import { AppModule } from './app/app.module';  means from its parent level folder app get app.modfdule.ts file
//---ts   js

//import bootstrap ---css

//that is it. 


//3, now we write app.module.ts for index.html page can be convert to js auto, but we do not care

//4, impoer appmodule
// import { AppModule } from './app/app.module'
// means this ts file, last line is 
//export AppModule

//appmodule .ts is applicaiton level js file
<app>app.component.html here</app>

@Component({
    selector: 'app',
    template: require('./app.component.html'),
    styles: [require('./app.component.css')]
})
export class AppComponent {
}



//so we need to import all other modules in here.


//5, import { NgModule } from '@angular/core';
//
//@NgModule({});

//6, import { RouterModule } from '@angular/router';
    //import { UniversalModule } from 'angular2-universal';

//7, above three is global module needs all the time

//8, now we import first component into ng2

//9, import { AppComponent } from './components/app/app.component'   from './' means from app/, here ts css and html bundle together

//10, app .compone tsimply load a html page

//11, now we see what compoent in html we need to laod aggain

//12, <div class='container-fluid'>
//<div class='row' >
//    <div class='col-sm-3' >
//        <nav-menu > </nav-menu>
//        < /div>
//        < div class='col-sm-9 body-content' >
//            <router-outlet > </router-outlet>
//            < /div>
//            < div >
//            <footer-outlet > </footer-outlet>
//            < /div>
//            < /div>
//            < /div>

//we need to laod three compoents

//13, go to create three compantes under the same folder

//14, then add to @ngmodule({}); object namespace 

//such as 
//@NgModule({
//    bootstrap: [AppComponent], //means module is from app.component boot

//15, then declare alll componet here in module as object

//declarations: [
//    AppComponent,
//    NavMenuComponent,
//    CounterComponent,
//    FetchDataComponent,
//    HomeComponent
//], 

//16,  imports: [
                //UniversalModule, // Must be first import. This automatically imports BrowserModule, HttpModule, and JsonpModule too.
                //    RouterModule.forRoot([
                //        { path: '', redirectTo: 'home', pathMatch: 'full' },
                //        { path: 'home', component: HomeComponent },
                //        { path: 'counter', component: CounterComponent },
                //        { path: 'fetch-data', component: FetchDataComponent },
                //        { path: '**', redirectTo: 'home' }
                //    ])
                //    ]

//here, we import routermodule for root menas http://localhost:5555/ root add, counter, fetch-data, etc, that call what compoent in

//17, that is all

//when each compoent is called, its html.css, and ts three files are called auto. 




18

<body>
<app>
